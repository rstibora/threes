"""
Django settings for threes project.

Generated by 'django-admin startproject' using Django 3.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

env_debug = os.environ.get("DJANGO_DEBUG")
if env_debug is None or env_debug not in ["true", "false"]:
    raise Exception("Environment variable 'DJANGO_DEBUG' has to be defined"
                    " and set to 'true' or 'false'.")
DEBUG = env_debug == "true"

env_secret_key = os.environ.get("DJANGO_SECRET_KEY")
if env_secret_key is None and not DEBUG:
    raise Exception("Environment variable 'DJANGO_SECRET_KEY' has to be defined"
                    " in production environment.")
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'b2h%554u$nq9e71mwrvk)&j1h6(zd*02%d6f@h)#u%6vqo3lf8'
if env_secret_key is not None:
    SECRET_KEY = env_secret_key

ALLOWED_HOSTS = []
env_django_host = os.environ.get("DJANGO_HOST")
if env_django_host is not None:
    ALLOWED_HOSTS = [str(env_django_host)]
if not DEBUG:
    ALLOWED_HOSTS = [".localhost", "127.0.0.1", "[::1]"]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'manifest_loader',
    'rest_framework',
    'widget_tweaks',

    'apps.app',
    'apps.core',
    'apps.effort',
    'apps.reviews',
    'apps.tasks',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'threes.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'threes.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'threes',
        'USER': 'threes',
        # Production server uses peer authentication (so the password field has no effect there).
        'PASSWORD': os.environ.get("POSTGRES_THREES_PASSWORD"),
        'OPTIONS': {
            'client_encoding': 'UTF-8',
        }
    }
}

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LOGIN_REDIRECT_URL = "/app"

AUTH_USER_MODEL = "core.EmailUser"


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / "static_root"

STATICFILES_DIRS = []
# Choose one of the two. Ramdisk is used during the development and is served directly. Frontend
# dist folder is used in production build via collectstatic.
ramdisk_dist = BASE_DIR / "media/ramdisk/dist"
frontend_dist = BASE_DIR / "../../frontend/dist"
if ((ramdisk_dist.exists() and frontend_dist.exists())
        or (not ramdisk_dist.exists() and not frontend_dist.exists())):
    raise Exception(f"One (only one) of the two ({ramdisk_dist},"
                    f" {frontend_dist}) staticfilesdirs must exist.")
STATICFILES_DIRS = [directory for directory in (ramdisk_dist, frontend_dist) if directory.exists()]

SESSION_COOKIE_HTTPONLY = True

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",  # Present due to API web view.
    ),
    "DEFAULT_PAGINATION_CLASS": None,
}
